#!/bin/bash
set -euo pipefail

COVERAGE_OUTPUT_DIR="/tmp/${USER}/all_coverage/"

BASELINES=(
    "//sw/device/silicon_creator/rom:instrumented_mask_rom_baseline_coverage"
)

TARGETS=(
    # //sw/device/lib/base:crc32_functest_fpga_cw310_sival_rom_ext
    # //sw/device/tests:uart_smoketest_fpga_cw340_test_rom
    # //sw/device/tests:uart_smoketest_fpga_cw340_rom_with_fake_keys
    # //sw/device/tests:uart_smoketest_fpga_cw340_rom_ext
    # //sw/device/tests:uart_smoketest_fpga_cw310_sival_rom_ext

    # //sw/device/lib/crypto/drivers:aes_test_fpga_cw310_rom_with_fake_keys
    # //sw/device/lib/base:crc32_unittest
    # //sw/device/tests/crypto/cryptotest:hmac_sha256_kat_fpga_cw340_test_rom
    # //sw/device/silicon_creator/rom_ext/e2e/dice_chain:no_refresh_dice_x509_test_fpga_cw340_rom_ext
    # //sw/device/tests:rv_core_ibex_isa_test_prod_fpga_cw310_rom_with_fake_keys

    # //sw/device/silicon_creator/manuf/base:cp_provision_functest_fpga_cw340_rom_with_fake_keys
    # //sw/device/tests:rv_core_ibex_epmp_test_functest_fpga_cw310_rom_with_fake_keys

# //sw/device/silicon_creator/rom_ext/e2e/dice_chain:variation_interop_cwt_first_test_fpga_cw310_rom_with_fake_keys

# //sw/device/silicon_creator/rom_ext/e2e/verified_boot:position_imm_section_virtual_a_fpga_hyper310_rom_ext
# //sw/device/silicon_creator/rom:stack_utilization_test

)

# ./bazelisk.sh query 'tests(//sw/device/...) except attr("tags", "skip_in_ci|manual|broken|sim|silicon", //sw/device/...)'
TEST_ROM_TESTS=(
//sw/device/lib/testing/test_rom:test_rom_test_fpga_cw310_test_rom
//sw/device/tests:otp_ctrl_descrambling_test_fpga_cw310_test_rom
//sw/device/tests/crypto:rsa_3072_verify_functest_wycheproof_fpga_cw310_test_rom

# Report regex
# //sw/device/tests:status_report_test_fpga_cw310_test_rom
# //sw/device/tests:status_report_overflow_test_fpga_cw310_test_rom

# CHECK-fail: Mismatch between the expected digest and one generated by `scramble_image.py`.
# //sw/device/tests:kmac_app_rom_test_fpga_cw310_test_rom_fpga_cw310_test_rom

# Failed: cryptotest Quit command not found
# //sw/device/silicon_creator/lib/sigverify/sigverify_tests:sigverify_cryptotest_fpga_cw310_test_rom
)

source rom_targets.sh

TEST_GROUPS=(
    "INS_ROM_TESTS"
)

TARGETS+=(
    "${INS_ROM_TESTS[@]}"
)

BAZEL_ARGS=(
    --test_output=streamed
    # --test_timeout=600
    --copt=-Wno-error
    --copt=-Wno-enum-constexpr-conversion
    # --cache_test_results=no
    --config=ot_coverage
    --local_test_jobs=1
    --notest_runner_fail_fast
    --keep_going
    # --jobs=1
    # --subcommands
)

COVERAGE_DAT="bazel-out/_coverage/_coverage_report.dat"
LCOV_FILES="bazel-out/_coverage/lcov_files.tmp"

rm -f "${COVERAGE_DAT}"


for baseline_label in "${BASELINES[@]}"; do
    baseline_name="${baseline_label##*:}"
    cached_dat="bazel-out/_coverage/_coverage_${baseline_name}.dat"
    echo "Calculate baseline ${baseline_name}"

    rm -f "${COVERAGE_DAT}"
    rm -f "${cached_dat}"
    ./bazelisk.sh coverage "${baseline_label}" "${BAZEL_ARGS[@]}" "$@"

    if [[ -s "${COVERAGE_DAT}" ]]; then
      cp "${COVERAGE_DAT}" "${cached_dat}"
      echo "INFO: Baseline coverage cached successfully."
      echo "${cached_dat}"
    else
      echo "ERROR: Baseline coverage report not found!"
      exit 1
    fi
done


if [[ "${#TARGETS[@]}" == "0" ]]; then
    for test_group_name in "${TEST_GROUPS[@]}"; do
        test_group_expr="${test_group_name}[@]"
        test_group=( "${!test_group_expr}" )
        if [[ "${#test_group[@]}" != "0" ]]; then
            echo "Running test group ${test_group_name}"
            rm -f "${COVERAGE_DAT}"
            ./bazelisk.sh coverage "${test_group[@]}" "${BAZEL_ARGS[@]}" "$@" || true
        else
            echo "Skip empty test group ${test_group_name}"
        fi
    done
else
    rm -f "${COVERAGE_DAT}"
    ./bazelisk.sh coverage "${TARGETS[@]}" "${BAZEL_ARGS[@]}" "$@" || true
fi



GENHTML_ARGS=(
    --prefix "${PWD}"
    --ignore-errors unsupported
    --ignore-errors inconsistent
    --ignore-errors category
    # --ignore-errors corrupt
    --html-epilog sw/device/coverage/report_epilog.html
)

if [[ "${#BASELINES[@]}" == "0" ]]; then
    genhtml "${GENHTML_ARGS[@]}" \
        --output "${COVERAGE_OUTPUT_DIR}/no_baseline/" \
        "${COVERAGE_DAT}"
else
    for baseline_label in "${BASELINES[@]}"; do
        baseline_name="${baseline_label##*:}"
        cached_dat="bazel-out/_coverage/_coverage_${baseline_name}.dat"
        filtered_dat="bazel-out/_coverage/_coverage_filtered_${baseline_name}.dat"
        echo "Calculate baseline ${baseline_name}"

        python3 sw/device/coverage/coverage_filter/coverage_filter.py \
          --baseline="${cached_dat}" \
          --coverage="${COVERAGE_DAT}" \
          --output="${filtered_dat}"

        genhtml "${GENHTML_ARGS[@]}" \
            --output "${COVERAGE_OUTPUT_DIR}/${baseline_name}" \
            "${filtered_dat}"
    done
fi
